(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/node_modules/thirdweb/dist/esm/wallets/wallet-connect/qr-overlay.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

/**
 * Vanilla JavaScript QR Code overlay utility for WalletConnect URIs
 * Works in any browser context without requiring React or other frameworks
 */ /**
 * Creates a QR code overlay for the given WalletConnect URI
 */ __turbopack_context__.s({
    "createQROverlay": ()=>createQROverlay
});
function createQROverlay(uri) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const { qrSize = 280, showCloseButton = true, closeButtonText = "Ã—", theme = "light", container = document.body, onCancel } = options;
    // Create overlay backdrop
    const overlay = document.createElement("div");
    overlay.style.cssText = "\n    position: fixed;\n    inset: 0;\n    background-color: ".concat(theme === "dark" ? "rgba(0, 0, 0, 0.8)" : "rgba(0, 0, 0, 0.5)", ";\n    backdrop-filter: blur(10px);\n    z-index: 9999;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    animation: fadeIn 300ms ease-out;\n  ");
    // Apply custom overlay styles
    if (options.overlayStyles) {
        Object.assign(overlay.style, options.overlayStyles);
    }
    // Create modal container
    const modal = document.createElement("div");
    modal.style.cssText = "\n    background: ".concat(theme === "dark" ? "#1f1f1f" : "#ffffff", ";\n    border-radius: 16px;\n    padding: 24px;\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n    max-width: 90vw;\n    max-height: 90vh;\n    position: relative;\n    animation: scaleIn 300ms ease-out;\n  ");
    // Apply custom modal styles
    if (options.modalStyles) {
        Object.assign(modal.style, options.modalStyles);
    }
    // Create close button
    if (showCloseButton) {
        const closeButton = document.createElement("button");
        closeButton.textContent = closeButtonText;
        closeButton.style.cssText = "\n      position: absolute;\n      top: 16px;\n      right: 16px;\n      background: none;\n      border: none;\n      font-size: 24px;\n      cursor: pointer;\n      color: ".concat(theme === "dark" ? "#ffffff" : "#000000", ";\n      width: 32px;\n      height: 32px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: 8px;\n      transition: background-color 0.2s;\n    ");
        closeButton.addEventListener("mouseenter", ()=>{
            closeButton.style.backgroundColor = theme === "dark" ? "rgba(255, 255, 255, 0.1)" : "rgba(0, 0, 0, 0.1)";
        });
        closeButton.addEventListener("mouseleave", ()=>{
            closeButton.style.backgroundColor = "transparent";
        });
        closeButton.addEventListener("click", ()=>{
            destroyOverlay(true);
        });
        modal.appendChild(closeButton);
    }
    // Create QR code container
    const qrContainer = document.createElement("div");
    qrContainer.style.cssText = "\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 16px;\n  ";
    // Create title
    const title = document.createElement("h3");
    title.textContent = "Scan to Connect";
    title.style.cssText = "\n    margin: 0;\n    font-size: 18px;\n    font-weight: 600;\n    color: ".concat(theme === "dark" ? "#ffffff" : "#000000", ";\n    text-align: center;\n  ");
    // Create QR code canvas
    const qrCanvas = document.createElement("canvas");
    qrCanvas.width = qrSize;
    qrCanvas.height = qrSize;
    qrCanvas.style.cssText = "\n    border: 1px solid ".concat(theme === "dark" ? "#333333" : "#e5e5e5", ";\n    border-radius: 12px;\n  ");
    // Generate QR code
    generateQRCode(uri, qrCanvas, qrSize).catch(console.error);
    // Create copy button for the URI
    const copyButton = document.createElement("button");
    copyButton.textContent = "Copy URI";
    copyButton.style.cssText = "\n    background: ".concat(theme === "dark" ? "#333333" : "#f5f5f5", ";\n    border: 1px solid ").concat(theme === "dark" ? "#444444" : "#e5e5e5", ";\n    color: ").concat(theme === "dark" ? "#ffffff" : "#000000", ";\n    padding: 8px 16px;\n    border-radius: 8px;\n    cursor: pointer;\n    font-size: 14px;\n    transition: background-color 0.2s;\n  ");
    copyButton.addEventListener("click", async ()=>{
        try {
            await navigator.clipboard.writeText(uri);
            const originalText = copyButton.textContent;
            copyButton.textContent = "Copied!";
            setTimeout(()=>{
                copyButton.textContent = originalText;
            }, 2000);
        } catch (err) {
            console.error("Failed to copy URI:", err);
        }
    });
    // Assemble the modal
    qrContainer.appendChild(title);
    qrContainer.appendChild(qrCanvas);
    qrContainer.appendChild(copyButton);
    modal.appendChild(qrContainer);
    overlay.appendChild(modal);
    // Add CSS animations
    const style = document.createElement("style");
    style.textContent = "\n    @keyframes fadeIn {\n      from { opacity: 0; }\n      to { opacity: 1; }\n    }\n    @keyframes fadeOut {\n      from { opacity: 1; }\n      to { opacity: 0; }\n    }\n    @keyframes scaleIn {\n      from { transform: scale(0.9); opacity: 0; }\n      to { transform: scale(1); opacity: 1; }\n    }\n    @keyframes scaleOut {\n      from { transform: scale(1); opacity: 1; }\n      to { transform: scale(0.9); opacity: 0; }\n    }\n  ";
    document.head.appendChild(style);
    // Event handlers
    const handleEscapeKey = (event)=>{
        if (event.key === "Escape") {
            destroyOverlay(true);
        }
    };
    const handleOverlayClick = (event)=>{
        if (event.target === overlay) {
            destroyOverlay(true);
        }
    };
    // Add event listeners
    document.addEventListener("keydown", handleEscapeKey);
    overlay.addEventListener("click", handleOverlayClick);
    // Append to container
    container.appendChild(overlay);
    function destroyOverlay() {
        let userInitiated = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
        document.removeEventListener("keydown", handleEscapeKey);
        overlay.removeEventListener("click", handleOverlayClick);
        // Call onCancel callback only if user initiated the close action
        if (userInitiated && onCancel) {
            onCancel();
        }
        // Animate both overlay and modal out
        overlay.style.animation = "fadeOut 200ms ease-in";
        modal.style.animation = "scaleOut 200ms ease-in";
        const cleanup = ()=>{
            if (overlay.parentNode) {
                overlay.parentNode.removeChild(overlay);
            }
            if (style.parentNode) {
                style.parentNode.removeChild(style);
            }
        };
        overlay.addEventListener("animationend", cleanup, {
            once: true
        });
        // Fallback cleanup in case animation doesn't fire
        setTimeout(cleanup, 250);
    }
    function hideOverlay() {
        overlay.style.display = "none";
    }
    function showOverlay() {
        overlay.style.display = "flex";
    }
    return {
        destroy: ()=>destroyOverlay(false),
        hide: hideOverlay,
        show: showOverlay
    };
}
/**
 * QR code generator that tries to use a real QR library if available,
 * otherwise falls back to a placeholder
 */ async function generateQRCode(text, canvas, size) {
    const ctx = canvas.getContext("2d");
    if (!ctx) return;
    // Try to dynamically import a QR code library if available
    // This allows the overlay to work with or without a QR code dependency
    const { toCanvas } = await __turbopack_context__.r("[project]/node_modules/qrcode/lib/browser.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i);
    await toCanvas(canvas, text, {
        width: size,
        margin: 2,
        color: {
            dark: "#000000",
            light: "#ffffff"
        }
    });
    return;
} //# sourceMappingURL=qr-overlay.js.map
}),
}]);

//# sourceMappingURL=node_modules_thirdweb_dist_esm_wallets_wallet-connect_qr-overlay_3314d414.js.map